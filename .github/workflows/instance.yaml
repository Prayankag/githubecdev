# Define the name of the GitHub Action workflow
name: Create an EC2 Instance

# This workflow is manually triggered using the GitHub Actions UI
on:
  workflow_dispatch:
    # Define inputs that are required for the manual trigger
    inputs:
      instanceName:
        description: "Name of the AWS Instance"
        required: true
      awsRegion:
        description: "AWS Region for the instance"
        required: true
      instanceType:
        description: "AWS instance type"
        required: true
      action:
        description: "Action to perform (apply/destroy)"
        required: true

# Jobs to be executed in this workflow
jobs:
  # Display input values for debugging
  display-input-values:
    runs-on: ubuntu-latest
    steps:
      - name: Display Input Values
        run: |
          echo "Instance Name: ${{ github.event.inputs.instanceName }} "
          echo "AWS Region: ${{ github.event.inputs.awsRegion }}"
          echo "Instance Type: ${{ github.event.inputs.instanceType }}"
          echo "Action: ${{ github.event.inputs.action }}"

  # Job to apply the EC2 instance
  apply_ec2:
    runs-on: ubuntu-latest
    needs: display-input-values
    if: ${{ github.event.inputs.action == 'apply' }}  # Only run if action is "apply"
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ github.event.inputs.awsRegion }}

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Format
        run: terraform fmt
        working-directory: ./terraform

      - name: Terraform Validate
        run: terraform validate
        working-directory: ./terraform

      - name: Terraform Plan
        run: terraform plan -var "instanceName=${{ github.event.inputs.instanceName }}" -var "awsRegion=${{ github.event.inputs.awsRegion }}" -var "instanceType=${{ github.event.inputs.instanceType }}" -out=tfplan
        working-directory: ./terraform

      - name: Terraform Apply
        run: terraform apply -auto-approve "tfplan"
        working-directory: ./terraform

  # Job to destroy the EC2 instance
  destroy_instance:
    runs-on: ubuntu-latest
    needs: display-input-values
    if: ${{ github.event.inputs.action == 'destroy' }}  # Only run if action is "destroy"
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ github.event.inputs.awsRegion }}

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Format
        run: terraform fmt
        working-directory: ./terraform

      - name: Terraform Plan Destroy
        run: terraform plan -destroy -var "instanceName=${{ github.event.inputs.instanceName }}" -var "awsRegion=${{ github.event.inputs.awsRegion }}" -var "instanceType=${{ github.event.inputs.instanceType }}" -out=tfplan
        working-directory: ./terraform

      - name: Terraform Destroy
        run: terraform apply -auto-approve tfplan
        working-directory: ./terraform
